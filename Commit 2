#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX 10

typedef struct {
    int elem[MAX];
    int count;
} List;

List L;

List initialize(List L){
    L.count = 0;
    return L;
}

List insertPos(List L, int data, int position){
    int a;

    if(position >= 0 && position <= L.count && L.count < MAX){

        
        for(a = L.count; a > position; a--){
            L.elem[a] = L.elem[a - 1]; 
        }
        L.elem[position] = data; 
        L.count++;  
    } else {
        printf("Invalid position\n");
    }

    return L;
}

List deletePos(List L, int pos){
    int a;

  
    if(pos >= 0 && pos < L.count){

        
        for(a = pos; a < L.count - 1; a++){
            L.elem[a] = L.elem[a + 1];
        }
        L.count--; 
    } else {
        printf("Invalid position\n");
    }

    return L;
}

int locate(List L, int data){
    int a;

   
    for(a = 0; a < L.count; a++){
        if(L.elem[a] == data){  
            printf("Found\n");
            return a;  
        }
    }
    
    return -1; 
}

List insertSorted(List L, int data){
    
    int i;
    
    if(L.count != MAX){
        
        for(i = L.count - 1; i >= 0 && L.elem[i] > data; i--){
            
            L.elem[i + 1] = L.elem[i];
            
        }
        
        L.elem[i + 1] = data;
        L.count ++;
        
        
    }
    
}

int main() {
    // Initialize the list
    L = initialize(L);

    // Insert some elements in sorted order
    L = insertSorted(L, 10);
    L = insertSorted(L, 20);
    L = insertSorted(L, 30);
    L = insertSorted(L, 40);
    L = insertSorted(L, 25);  // Insert an element in between

    // Print the list after inserting elements in sorted order
    printf("List after inserting elements in sorted order: \n");
    for (int i = 0; i < L.count; i++) {
        printf("%d ", L.elem[i]);
    }
    printf("\n");

    return 0;
}
